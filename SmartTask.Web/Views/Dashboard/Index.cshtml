@model IEnumerable<SmartTask.Core.Models.Project>
@using Microsoft.AspNetCore.Identity
@using SmartTask.Core.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Dashboard";
    var currentUser = await UserManager.GetUserAsync(User);
    var totalProjects = Model.Count();
    var totalTasks = Model.Sum(p => p.Tasks?.Count ?? 0);
    var completedProjects = Model.Count(p => p.Status == "Completed");
    var pendingProjects = Model.Count(p => p.Status == "Pending");
    var inProgressProjects = Model.Count(p => p.Status == "In Progress");

    // User preferences from ViewBag
    var userPreference = ViewBag.UserPreference as SmartTask.Core.Models.UserDashboardPreference;
    var showProjectStatus = userPreference?.ShowProjectStatus ?? true;
    var showRecentProjects = userPreference?.ShowRecentProjects ?? true;
    var showUpcomingTasks = userPreference?.ShowUpcomingTasks ?? true;
    var showActivityChart = userPreference?.ShowActivityChart ?? true;
}
<!DOCTYPE html>
<html lang="en">
<head>
    ...
</head>
<body>
    <div class="container-fluid py-4">

        <!-- Header -->
        <div class="dashboard-header mb-4 d-flex justify-content-between align-items-center">
            <div>
                <h1 class="mb-2"><i class="fas fa-tachometer-alt me-2"></i>Welcome, <span class="username-highlight">@currentUser?.FullName</span></h1>
                <p class="mb-0 opacity-75">Here's an overview of your projects and progress</p>
            </div>
            <a href="@Url.Action("Settings", "Dashboard")" class="settings-toggle btn btn-outline-secondary">
                <i class="fas fa-cog"></i> Settings
            </a>
        </div>

        <!-- Project Status Summary -->
        <div data-widget-container="project-status" style="display: @(showProjectStatus ? "block" : "none")">
            <div class="row mb-4 g-3">

                <div class="col-md-3 col-sm-6">
                    <div class="card stat-card bg-gradient-primary p-3 text-white">
                        <div class="stat-label">Total Projects</div>
                        <div class="stat-figure display-4">@totalProjects</div>
                        <p class="mb-0 opacity-75">Across all departments</p>
                        <i class="fas fa-project-diagram icon fa-3x"></i>
                    </div>
                </div>

                <div class="col-md-3 col-sm-6">
                    <div class="card stat-card bg-gradient-success p-3 text-white">
                        <div class="stat-label">Completed</div>
                        <div class="stat-figure display-4">@completedProjects</div>
                        <p class="mb-0 opacity-75">
                            @(completedProjects > 0
                                ? $"{Math.Round((double)completedProjects / totalProjects * 100)}% completion rate"
                                : "No completed projects yet")
                        </p>
                        <i class="fas fa-check-circle icon fa-3x"></i>
                    </div>
                </div>

                <div class="col-md-3 col-sm-6">
                    <div class="card stat-card bg-gradient-warning p-3 text-white">
                        <div class="stat-label">In Progress</div>
                        <div class="stat-figure display-4">@inProgressProjects</div>
                        <p class="mb-0 opacity-75">
                            @(inProgressProjects > 0
                                ? $"{Math.Round((double)inProgressProjects / totalProjects * 100)}% of total projects"
                                : "No projects in progress")
                        </p>
                        <i class="fas fa-spinner icon fa-3x"></i>
                    </div>
                </div>

                <div class="col-md-3 col-sm-6">
                    <div class="card stat-card bg-gradient-danger p-3 text-white">
                        <div class="stat-label">Pending</div>
                        <div class="stat-figure display-4">@pendingProjects</div>
                        <p class="mb-0 opacity-75">
                            <span class="text-warning fw-bold">
                                @((pendingProjects * 100 / (totalProjects == 0 ? 1 : totalProjects)).ToString("0"))%
                            </span> awaiting start
                        </p>
                        <i class="fas fa-hourglass-half icon fa-3x"></i>
                    </div>
                </div>

            </div>
        </div>

        <!-- Total Tasks -->
        <div class="row mb-4">
            <div class="col-md-3 col-sm-6">
                <div class="card stat-card bg-gradient-info p-3 text-white">
                    <div class="stat-label">Total Tasks</div>
                    <div class="stat-figure display-4">@totalTasks</div>
                    <p class="mb-0 opacity-75">Across all projects</p>
                    <i class="fas fa-tasks icon fa-3x"></i>
                </div>
            </div>

            <div class="col-md-3 col-sm-6">
                <div class="card stat-card bg-gradient-secondary p-3 text-white">
                    <div class="stat-label">Task Coverage</div>
                    <div class="stat-figure display-4">
                        @(totalProjects > 0
                            ? ((double)totalTasks / totalProjects * 100).ToString("0") + "%"
                            : "N/A")
                    </div>
                    <p class="mb-0 opacity-75">tasks per project</p>
                    <i class="fas fa-chart-bar icon fa-3x"></i>
                </div>
            </div>
        </div>

        <!-- Projects Section (Recent Projects) -->
        <div class="row">
            <div class="col-md-7 mb-4" data-widget-container="recent-projects" style="display: @(showRecentProjects ? "block" : "none")">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-project-diagram me-2 text-primary"></i>Recent Projects</h5>
                        <div class="d-flex flex-wrap gap-2">
                            <button class="btn btn-sm btn-outline-secondary sort-btn" data-sort="date-asc">
                                <i class="fas fa-arrow-up me-1"></i> Oldest
                            </button>
                            <button class="btn btn-sm btn-outline-secondary sort-btn" data-sort="date-desc">
                                <i class="fas fa-arrow-down me-1"></i> Newest
                            </button>
                            <button class="btn btn-sm btn-outline-secondary sort-btn" data-sort="status">
                                <i class="fas fa-sort me-1"></i> Status
                            </button>
                            <a href="@Url.Action("Index", "Project")" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-list me-1"></i> View All
                            </a>
                        </div>
                    </div>
                    <div class="card-body" id="projects-container">
                        @if (!Model.Any())
                        {
                            <div class="alert alert-info rounded-3 d-flex align-items-center">
                                <i class="fas fa-info-circle me-3 fs-4"></i>
                                <div>
                                    No projects found. @(User.IsInRole("Admin") ? "Create a new project to get started!" : "Contact your manager to be assigned to projects.")
                                </div>
                            </div>
                        }
                        else
                        {
                            foreach (var project in Model.Take(userPreference?.RecentProjectsCount ?? 5))
                            {
                                var completedTasks = project.Tasks?.Count(t => t.Status == "Completed") ?? 0;
                                var totalProjectTasks = project.Tasks?.Count() ?? 1;
                                var progressPercentage = (int)((completedTasks / (double)totalProjectTasks) * 100);
                                var statusClass = project.Status == "Completed" ? "success" :
                                project.Status == "In Progress" ? "primary" : "warning";

                                <div class="project-card"
                                     data-status="@project.Status"
                                     data-date="@project.StartDate?.ToString("yyyyMMdd")"
                                     onclick="window.location.href='@Url.Action("Details", "Project", new { id = project.Id })'">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <div>
                                            <h5 class="mb-1">
                                                @project.Name
                                                @if (project.Status == "Completed")
                                                {
                                                    <i class="fas fa-check-circle ms-2 text-success"></i>
                                                }
                                            </h5>
                                            <p class="text-muted mb-2">
                                                @(project.Description?.Length > 100 ? project.Description.Substring(0, 100) + "..." : project.Description)
                                            </p>
                                            <div class="d-flex align-items-center gap-2">
                                                <span class="badge bg-light text-dark">
                                                    <i class="fas fa-tasks me-1"></i> @totalProjectTasks Tasks
                                                </span>
                                                <span class="badge bg-light text-success">
                                                    <i class="fas fa-check-circle me-1"></i> @completedTasks Completed
                                                </span>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-@statusClass">
                                                @project.Status
                                            </span>
                                        </div>
                                    </div>
                                    <div class="progress mb-3">
                                        <div class="progress-bar bg-@statusClass"
                                             role="progressbar"
                                             style="width: @progressPercentage%"
                                             aria-valuenow="@progressPercentage"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="date-badge">
                                            <i class="far fa-calendar-alt"></i>
                                            <span>@project.StartDate?.ToString("MMM dd") - @project.EndDate?.ToString("MMM dd")</span>
                                        </div>
                                        <div class="department-badge">
                                            <i class="fas fa-building"></i>
                                            <span>@(project.Department?.Name ?? "No Department")</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <!-- Tasks Section (Upcoming Tasks) -->
            <div class="col-md-5 mb-4" data-widget-container="upcoming-tasks" style="display: @(showUpcomingTasks ? "block" : "none")">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-tasks me-2 text-info"></i>Upcoming Tasks</h5>
                        <a href="@Url.Action("Index", "Task")" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-list me-1"></i> View All Tasks
                        </a>
                    </div>
                    <div class="card-body">
                        @* Render upcoming tasks for current user *@
                        @* Example placeholder *@
                        <p>No upcoming tasks assigned.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Activity Chart (conditionally rendered) -->
        @if (showActivityChart)
        {
            <div class="row mb-4" data-widget-container="activity-chart">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5><i class="fas fa-chart-line me-2"></i>Activity Overview</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="activityChart" height="150"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>

    <script>
        document.querySelectorAll('.sort-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const sortBy = this.getAttribute('data-sort');
                const container = document.getElementById('projects-container');
                const projects = Array.from(container.children);

                projects.sort((a, b) => {
                    if (sortBy === 'date-asc') {
                        return a.dataset.date.localeCompare(b.dataset.date);
                    }
                    else if (sortBy === 'date-desc') {
                        return b.dataset.date.localeCompare(a.dataset.date);
                    }
                    else if (sortBy === 'status') {
                        return a.dataset.status.localeCompare(b.dataset.status);
                    }
                    return 0;
                });

                container.innerHTML = '';
                projects.forEach(p => container.appendChild(p));
            });
        });
    </script>
</body>
</html>
